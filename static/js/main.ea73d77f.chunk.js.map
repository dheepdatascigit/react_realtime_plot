{"version":3,"sources":["components/Clock.js","components/StartStopTimer.js","App.js","reportWebVitals.js","index.js"],"names":["Clock","props","state","date","Date","this","timerID","setInterval","tick","clearInterval","setState","toLocaleTimeString","Component","StartStopTimer","randNumber","y1Series","plotData","labels","datasets","label","data","fill","backgroundColor","borderColor","maxnum","newRandNum","Math","floor","random","prevState","newArr","console","log","splice","temptimerId","genRandomNum","width","height","App","name","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAkCeA,E,kDA/BX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAACC,KAAM,IAAIC,MAFT,E,gEAKE,IAAD,OAChBC,KAAKC,QAAUC,aAAa,WACxB,EAAKC,SACN,O,6CAIHC,cAAcJ,KAAKC,W,6BAKnBD,KAAKK,SAAS,CACVP,KAAM,IAAIC,S,+BAKd,OACI,8BACI,4CAAeC,KAAKH,MAAMC,KAAKQ,8B,GA1B3BC,a,gBCoELC,E,kDAlEX,WAAYZ,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTY,WAAY,EACZC,SAAU,GACVC,SAAU,CACNC,OAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IACzDC,SAAU,CACR,CACEC,MAAO,gBACPC,KAAM,GACNC,MAAM,EACNC,gBAAiB,uBACjBC,YAAa,yBAdV,E,yDAqBNC,GACT,IAAMC,EAAaC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMH,IACzDnB,KAAKK,UAAS,SAACmB,GACX,IAAMC,EAASD,EAAUd,SAGzB,OAFAgB,QAAQC,IAAI,YAAaF,GAElB,CACHhB,WAAYW,EACZV,SAAU,sBAAIe,GAAJ,CAAYL,IAAYQ,QAAQ,IAC1CjB,SAAU,CACNC,OAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IACzDC,SAAU,CACR,CACEC,MAAO,gBACPC,KAAM,sBAAIU,GAAJ,CAAYL,IAAYQ,QAAQ,IACtCZ,MAAM,EACNC,gBAAiB,uBACjBC,YAAa,8B,6CAS7Bd,cAAcJ,KAAK6B,e,0CAGF,IAAD,OAChB7B,KAAK6B,YAAc3B,aAAa,WAC5B,EAAK4B,aAAa,EAAKlC,MAAMuB,UAC9B,O,+BAIH,OACI,gCACI,mDAAsBnB,KAAKH,MAAMY,cACjC,cAAC,OAAD,CAAMM,KAAMf,KAAKH,MAAMc,SAAUoB,MAAO,IAAKC,OAAQ,a,GA7DxCzB,aCad0B,E,uKAVP,OACI,0CACW,yCAAYjC,KAAKJ,MAAMsC,QAC9B,cAAC,EAAD,IACA,cAAC,EAAD,CAAgBf,OAAQ,Y,GANtBZ,aCQH4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAKZ,KAAK,qBAEZa,SAASC,eAAe,SAmB1Bb,EAAgBT,QAAQC,M","file":"static/js/main.ea73d77f.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Clock extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {date: new Date()};\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timerID = setInterval( () => {\r\n            this.tick()\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n\r\n    }\r\n\r\n    tick() {\r\n        this.setState({\r\n            date: new Date()\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Time now: {this.state.date.toLocaleTimeString()}</h2>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Clock\r\n","import React, { Component } from 'react'\r\nimport {Line} from 'react-chartjs-2'\r\n\r\nclass StartStopTimer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            randNumber: 0,\r\n            y1Series: [],\r\n            plotData: {\r\n                labels: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\r\n                datasets: [\r\n                  {\r\n                    label: \"First dataset\",\r\n                    data: [],\r\n                    fill: true,\r\n                    backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                    borderColor: \"rgba(75,192,192,1)\"\r\n                  }\r\n                ]\r\n              }\r\n        }\r\n    }\r\n\r\n    genRandomNum(maxnum) {\r\n        const newRandNum = Math.floor(Math.random() * Math.floor(maxnum));\r\n        this.setState((prevState) => {\r\n            const newArr = prevState.y1Series\r\n            console.log(\"new array\", newArr);\r\n            //let newArr = prevState.y1Series.push(newRandNum);\r\n            return {\r\n                randNumber: newRandNum,\r\n                y1Series: [...newArr, newRandNum].splice(-20),\r\n                plotData: {\r\n                    labels: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\r\n                    datasets: [\r\n                      {\r\n                        label: \"First dataset\",\r\n                        data: [...newArr, newRandNum].splice(-20),\r\n                        fill: false,\r\n                        backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                        borderColor: \"rgba(75,192,192,1)\"\r\n                      }\r\n                    ]\r\n                  }\r\n            }\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.temptimerId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.temptimerId = setInterval( () => {\r\n            this.genRandomNum(this.props.maxnum)\r\n        }, 1000);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Random number is {this.state.randNumber}</h2>\r\n                <Line data={this.state.plotData} width={200} height={100}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StartStopTimer\r\n","import React, { Component } from 'react'\r\nimport Clock from './components/Clock'\r\nimport StartStopTimer from './components/StartStopTimer'\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                return <h1>Hello, {this.props.name}</h1>\r\n                <Clock />\r\n                <StartStopTimer maxnum={50} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App name=\"Real-Time plot\"/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n/* function tick() {\n  const element = (\n    <div>\n      <h1>Hello, world!</h1>\n      <h2>It is {new Date().toLocaleTimeString()}.</h2>\n    </div>\n  );\n  ReactDOM.render(element, document.getElementById('root'));\n}\n\nsetInterval(tick, 1000); */\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}